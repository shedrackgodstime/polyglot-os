//! Simple bitmap font for console text rendering

/// 8x16 bitmap font data (simplified ASCII)
/// Each character is 8 pixels wide, 16 pixels tall
/// Each byte represents one row of 8 pixels
pub const FONT_WIDTH: usize = 8;
pub const FONT_HEIGHT: usize = 16;

/// Font bitmap data for ASCII characters 32-126
pub const FONT_DATA: &[u8] = &[
    // Space (32)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // ! (33)
    0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00,
    0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // " (34)
    0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // # (35)
    0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C,
    0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // $ (36)
    0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06,
    0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00, 0x00,
    
    // % (37)
    0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18,
    0x30, 0x66, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // & (38)
    0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC,
    0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // ' (39)
    0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // ( (40)
    0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30,
    0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // ) (41)
    0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C,
    0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // * (42)
    0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // + (43)
    0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // , (44)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // - (45)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // . (46)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // / (47)
    0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60,
    0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 0 (48)
    0x00, 0x00, 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6,
    0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 1 (49)
    0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18,
    0x18, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 2 (50)
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30,
    0x60, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 3 (51)
    0x00, 0x00, 0x7C, 0xC6, 0x06, 0x3C, 0x06, 0x06,
    0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 4 (52)
    0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE,
    0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 5 (53)
    0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0x06,
    0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 6 (54)
    0x00, 0x00, 0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6,
    0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 7 (55)
    0x00, 0x00, 0xFE, 0xC6, 0x06, 0x0C, 0x18, 0x30,
    0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 8 (56)
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6,
    0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // 9 (57)
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06,
    0x0C, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // : (58)
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // ; (59)
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18,
    0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // < (60)
    0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30,
    0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // = (61)
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // > (62)
    0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C,
    0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // ? (63)
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18,
    0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // @ (64)
    0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE,
    0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // A (65)
    0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE,
    0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // B (66)
    0x00, 0x00, 0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66,
    0x66, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // C (67)
    0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0,
    0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // D (68)
    0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66,
    0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // E (69)
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68,
    0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // F (70)
    0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68,
    0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
];

/// Get font data for a character
pub fn get_char_data(c: u8) -> &'static [u8] {
    if c >= 32 && c <= 70 {
        let index = (c - 32) as usize * FONT_HEIGHT;
        &FONT_DATA[index..index + FONT_HEIGHT]
    } else {
        // Return space character for unsupported chars
        &FONT_DATA[0..FONT_HEIGHT]
    }
}
