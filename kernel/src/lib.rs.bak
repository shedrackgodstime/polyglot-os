//! The Polyglot OS kernel

#![no_std]
#![feature(abi_x86_interrupt)]
#![feature(asm_const)]
#![feature(naked_functions)]
#![feature(panic_info_message)]
#![warn(missing_docs)]
#![warn(missing_debug_implementations)]

// Re-export the panic handler
#[panic_handler]
fn panic(info: &core::panic::PanicInfo) -> ! {
    use crate::serial::write_str;
    
    if let Some(location) = info.location() {
        write_str(&format!(
            "Panic at {}:{}:{}\r\n",
            location.file(),
            location.line(),
            location.column()
        ));
    }

    if let Some(message) = info.message() {
        write_str(&format!("Panic: {}", message));
    }

    crate::hcf();
}

// Re-export the entry point
pub use crate::main::_start;

// Module declarations
pub mod arch;
pub mod boot;
pub mod framebuffer;
pub mod serial;
pub mod main;

/// Halt and catch fire - infinite loop with CPU halt instruction
pub fn hcf() -> ! {
    loop {
        unsafe {
            core::arch::asm!("hlt", options(nomem, nostack));
        }
    }
}
